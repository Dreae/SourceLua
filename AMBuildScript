# -*- Python -*-
# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:

import os
import fnmatch


class SDK(object):
  def __init__(self, sdk, ext, code, define, dir_):
    self.folder = 'hl2sdk-' + dir_
    self.envvar = sdk
    self.ext = ext
    self.code = code
    self.define = define
    self.name = dir_
    self.path = os.path.join(builder.sourcePath, '../', self.folder)


PossibleSDKs = {
    'css':  SDK('HL2SDKCSS', '2.css', '6', 'CSS', 'css'),
    'l4d':  SDK('HL2SDKL4D', '2.l4d', '12', 'LEFT4DEAD', 'l4d'),
    'csgo': SDK('HL2SDKCSGO', '2.csgo', '20', 'CSGO', 'csgo'),
    'dota': SDK('HL2SDKDOTA', '2.dota', '21', 'DOTA', 'dota'),
}

builder.DetectCxx()

class BuildConfig(object):
    def __init__(self, sdk):
        self.sdk = sdk
        self.binary = builder.cxx.Library('sourcelua.' + sdk.ext)
        self.sources = []
        for root, dirnames, filenames in os.walk(os.path.join(builder.sourcePath, 'src')):
            for filename in fnmatch.filter(filenames, '*.cpp'):
                self.sources.append(os.path.join(root, filename))

    def config_for_sdk(self):
        sdk = self.sdk
        program = self.binary

        defines = ['SE_' + PossibleSDKs[k].define + '=' + PossibleSDKs[k].code for k in PossibleSDKs]
        program.compiler.defines += defines
        program.compiler.defines += ['SOURCE_ENGINE=' + sdk.code]

        paths = [
            ['public'],
            ['public', 'engine'],
            ['public', 'mathlib'],
            ['public', 'vstdlib'],
            ['public', 'tier0'],
            ['public', 'tier1']
        ]

        if sdk.name == 'episode1' or sdk.name == 'darkm':
            paths.append(['public', 'dlls'])
            paths.append(['game_shared'])
        else:
            paths.append(['public', 'game', 'server'])
            paths.append(['public', 'toolframework'])
            paths.append(['game', 'shared'])
            paths.append(['common'])
            if sdk.name == 'csgo':
                paths += [
                    ['common', 'protobuf-2.5.0', 'src'],
                    ['public', 'engine', 'protobuf'],
                    ['public', 'game', 'shared', 'csgo', 'protobuf']
                ]

        if sdk.name in ['blade', 'insurgency', 'csgo', 'dota']:
            program.compiler.defines += ['NETWORK_VARS_ENABLED']

        if sdk.name in ['css', 'hl2dm', 'dods', 'sdk2013', 'bms', 'tf2', 'l4d', 'nucleardawn', 'l4d2', 'dota']:
            program.compiler.defines += ['NO_HOOK_MALLOC', 'NO_MALLOC_OVERRIDE']

        for path in paths:
            program.compiler.includes += [os.path.join(sdk.path, *path)]

        lib_folder = os.path.join(sdk.path, 'lib', 'linux')
        program.compiler.postlink += [
            program.compiler.Dep(os.path.join(lib_folder, 'tier1_i486.a')),
            program.compiler.Dep(os.path.join(lib_folder, 'mathlib_i486.a'))
        ]
        if sdk.name == 'csgo':
            program.compiler.postlink += [
                os.path.join(sdk.path, 'lib', 'linux32', 'release', 'libprotobuf.a')
            ]

        dynamic_libs = []
        if sdk.name in ['css', 'hl2dm', 'dods', 'tf2', 'sdk2013', 'bms', 'nucleardawn', 'l4d2', 'insurgency']:
            dynamic_libs = ['libtier0_srv.so', 'libvstdlib_srv.so']
        elif sdk.name in ['l4d', 'blade', 'insurgency', 'csgo', 'dota']:
            dynamic_libs = ['libtier0.so', 'libvstdlib.so']
        for library in dynamic_libs:
            source_path = os.path.join(lib_folder, library)
            output_path = os.path.join(program.localFolder, library)

            def make_linker(source_path, output_path):
                def link(context, binary):
                    cmd_node, (output,) = context.AddSymlink(source_path, output_path)
                    return output
                return link

            linker = make_linker(source_path, output_path)
            program.compiler.linkflags[0:0] = [program.compiler.Dep(library, linker)]

        self.config_gcc()

    # TODO: Custom suport will need to be added for non-gcc compilers ENHANCEMENT
    def config_gcc(self):
        program = self.binary
        program.compiler.defines += [
            'stricmp=strcasecmp',
            '_stricmp=strcasecmp',
            '_snprintf=snprintf',
            '_vsnprintf=vsnprintf',
            'HAVE_STDINT_H',
            'COMPILER_GCC',
            '_LINUX',
            'POSIX',
            'GNUC'
        ]
        program.compiler.cflags += [
            '-pipe',
            '-fno-strict-aliasing',
            '-fvisibility=hidden',
            '-Wall',
            '-msse',
            '-m32',
            '-fPIC',
            '-fno-rtti'
        ]
        program.compiler.cxxflags += [
            '-std=c++11',
            '-fno-exceptions',
            '-Wno-non-virtual-dtor',
            '-Wno-overloaded-virtual',
            '-fvisibility-inlines-hidden'
        ]
        program.compiler.linkflags += [
            program.compiler.Dep(os.path.join(builder.sourcePath, 'lua', 'src', 'libluajit.so')),
            program.compiler.Dep(os.path.join(builder.sourcePath, 'curl', 'lib', '.libs', 'libcurl.so')),
            '-Wl,-rpath=$ORIGIN'
        ]

        program.compiler.includes += [
            os.path.join(builder.sourcePath, 'curl', 'include'),
            os.path.join(builder.sourcePath, 'lua', 'src'),
            os.path.join(builder.sourcePath, 'src'),
            os.path.join(builder.sourcePath, 'metamod-source', 'core'),
            os.path.join(builder.sourcePath, 'metamod-source', 'core', 'sourcehook')
        ]

        program.compiler.linkflags += ['-m32']
        if builder.options.debug:
            program.compiler.cflags += ['-g', '-ggdb3']
        else:
            program.compiler.cflags += ['-O3']
        program.sources += self.sources

css = BuildConfig(PossibleSDKs['css'])
css.config_for_sdk()

output = builder.Add(css.binary)

dist = builder.AddFolder('package/addons/sourcelua/bin')
builder.AddCopy(os.path.join(builder.sourcePath, 'lua', 'src', 'libluajit.so'), os.path.join(dist.path, 'libluajit-5.1.so.2'))
builder.AddCopy(os.path.join(builder.sourcePath, 'curl', 'lib', '.libs', 'libcurl.so.4.3.0'), os.path.join(dist.path, 'libcurl.so.4'))
builder.AddCopy(output.binary, dist)
